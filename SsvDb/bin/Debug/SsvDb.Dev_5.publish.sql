/*
Deployment script for SSV

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "SSV"
:setvar DefaultFilePrefix "SSV"
:setvar DefaultDataPath "D:\Programs\MSSQL14.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "D:\Programs\MSSQL14.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

--:r .\SeedData\User.sql;
GO

GO
/*
The column [dbo].[Blog].[CreatedBy] is being dropped, data loss could occur.
*/

IF EXISTS (select top 1 1 from [dbo].[Blog])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
/*
The column [dbo].[BlogItem].[CreatedBy] is being dropped, data loss could occur.
*/

IF EXISTS (select top 1 1 from [dbo].[BlogItem])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
PRINT N'Altering [dbo].[Blog]...';


GO
ALTER TABLE [dbo].[Blog] DROP COLUMN [CreatedBy];


GO
ALTER TABLE [dbo].[Blog]
    ADD [CreatedByUser] INT NULL;


GO
PRINT N'Starting rebuilding table [dbo].[BlogItem]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_BlogItem] (
    [Id]            INT            IDENTITY (1, 1) NOT NULL,
    [BlogId]        INT            NOT NULL,
    [Created]       DATETIME       NULL,
    [CreatedByUser] INT            NULL,
    [Text]          NVARCHAR (MAX) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[BlogItem])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_BlogItem] ON;
        INSERT INTO [dbo].[tmp_ms_xx_BlogItem] ([Id], [BlogId], [Created], [Text])
        SELECT   [Id],
                 [BlogId],
                 [Created],
                 [Text]
        FROM     [dbo].[BlogItem]
        ORDER BY [Id] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_BlogItem] OFF;
    END

DROP TABLE [dbo].[BlogItem];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_BlogItem]', N'BlogItem';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating [dbo].[BlogItem].[idx_blogitem]...';


GO
CREATE NONCLUSTERED INDEX [idx_blogitem]
    ON [dbo].[BlogItem]([BlogId] ASC);


GO
PRINT N'Creating [dbo].[Entity]...';


GO
CREATE TABLE [dbo].[Entity] (
    [Id]         INT            IDENTITY (1, 1) NOT NULL,
    [Name]       NVARCHAR (250) NULL,
    [Created]    DATETIME       NULL,
    [EntityType] INT            NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Event]...';


GO
CREATE TABLE [dbo].[Event] (
    [Id]          INT            IDENTITY (1, 1) NOT NULL,
    [UserId]      INT            NOT NULL,
    [IsPublic]    BIT            NOT NULL,
    [Name]        NVARCHAR (250) NULL,
    [Description] NVARCHAR (MAX) NULL,
    [EventStart]  DATETIME       NULL,
    [EventEnd]    DATETIME       NULL,
    [Location]    NVARCHAR (250) NULL,
    [Status]      INT            NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Movie]...';


GO
CREATE TABLE [dbo].[Movie] (
    [EntityId]      INT            NOT NULL,
    [Name]          NVARCHAR (250) NULL,
    [ImageFilePath] NVARCHAR (250) NULL,
    [ImdbLink]      NVARCHAR (250) NULL,
    [ImdbRating]    DECIMAL (18)   NULL,
    [YearReleased]  INT            NULL,
    PRIMARY KEY CLUSTERED ([EntityId] ASC)
);


GO
PRINT N'Creating [dbo].[Music]...';


GO
CREATE TABLE [dbo].[Music] (
    [EntityId]      INT            NOT NULL,
    [Name]          NVARCHAR (250) NULL,
    [ImageFilePath] NVARCHAR (250) NULL,
    [SpotifyLink]   NVARCHAR (250) NULL,
    [YearReleased]  INT            NULL,
    PRIMARY KEY CLUSTERED ([EntityId] ASC)
);


GO
PRINT N'Creating [dbo].[Rating]...';


GO
CREATE TABLE [dbo].[Rating] (
    [Id]          INT            IDENTITY (1, 1) NOT NULL,
    [EntityId]    INT            NOT NULL,
    [Created]     DATETIME       NULL,
    [UserId]      INT            NULL,
    [RatingValue] INT            NULL,
    [RatingText]  NVARCHAR (MAX) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[User]...';


GO
CREATE TABLE [dbo].[User] (
    [Id]       INT            IDENTITY (1, 1) NOT NULL,
    [Fullname] NVARCHAR (250) NULL,
    [Username] NVARCHAR (250) NULL,
    [Password] NVARCHAR (20)  NULL,
    [UserType] INT            NOT NULL,
    [IsActive] BIT            NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Altering [dbo].[spGetAllBlogs]...';


GO
ALTER PROCEDURE [dbo].[spGetAllBlogs]
	
AS
	SELECT b.*, u.Fullname AS 'CreatedByFullName' 
	FROM [Blog] b
	INNER JOIN [User] u on u.Id = b.CreatedByUser
RETURN 0
GO
PRINT N'Altering [dbo].[spGetBlog]...';


GO
ALTER PROCEDURE [dbo].[spGetBlog]
	@id int
AS
	SELECT b.*, u.Fullname AS 'CreatedByFullName'
	FROM [Blog] b 
	INNER JOIN [User] u on u.Id = b.CreatedByUser
	WHERE b.[Id] = @id
RETURN 0
GO
PRINT N'Altering [dbo].[spInsertBlog]...';


GO
ALTER PROCEDURE [dbo].[spInsertBlog]
	@name nvarchar(250),
	@createdBy nvarchar(250),
	@id int output
AS
DECLARE @result int
	INSERT INTO [Blog] ([Name], [Created], [CreatedByUser]) 
	VALUES (@name, GETDATE(), @createdBy)

	SET @id = SCOPE_IDENTITY()

	SET @result  = @@ERROR  
	SELECT @result

	RETURN @result
GO
PRINT N'Altering [dbo].[spGetBlogItems]...';


GO
ALTER PROCEDURE [dbo].[spGetBlogItems]
	@blogId int
AS
	SELECT b.*, u.Fullname AS 'CreatedByFullName' 
	FROM [BlogItem] b 
	INNER JOIN [User] u on u.[Id] = b.[CreatedByUser] 
	WHERE [BlogId] = @blogId
RETURN 0
GO
PRINT N'Altering [dbo].[spInsertBlogItem]...';


GO
ALTER PROCEDURE [dbo].[spInsertBlogItem]
	@createdBy nvarchar(250),
	@blogId int,
	@text nvarchar(max),
	@id int output
AS
DECLARE @result int
	INSERT INTO [BlogItem] ([Created], [BlogId], [CreatedByUser], [Text])
	VALUES (GETDATE(), @blogId, @createdBy, @text)

	SET @id = SCOPE_IDENTITY()

	SET @result  = @@ERROR  
	SELECT @result

	RETURN @result
GO
PRINT N'Creating [dbo].[spDeleteEvent]...';


GO
CREATE PROCEDURE [dbo].[spDeleteEvent]
	@id int

AS
	DELETE FROM [Event] WHERE [Id] = @id
RETURN 0
GO
PRINT N'Creating [dbo].[spGetAllEntities]...';


GO
CREATE PROCEDURE [dbo].[spGetAllEntities]
AS
	SELECT * FROM [Entity]
RETURN 0
GO
PRINT N'Creating [dbo].[spGetAllEvents]...';


GO
CREATE PROCEDURE [dbo].[spGetAllEvents]

AS
	SELECT * FROM [Event]
RETURN 0
GO
PRINT N'Creating [dbo].[spGetAllMovies]...';


GO
CREATE PROCEDURE [dbo].[spGetAllMovies]

AS
	SELECT * FROM [Entity] WHERE [EntityType] = 1
RETURN 0
GO
PRINT N'Creating [dbo].[spGetAllMusic]...';


GO
CREATE PROCEDURE [dbo].[spGetAllMusic]

AS
	SELECT * FROM [Entity] WHERE [EntityType] = 2
RETURN 0
GO
PRINT N'Creating [dbo].[spGetAllUsers]...';


GO
CREATE PROCEDURE [dbo].[spGetAllUsers]
AS
	SELECT * FROM [User]
RETURN 0
GO
PRINT N'Creating [dbo].[spGetBlogItem]...';


GO
CREATE PROCEDURE [dbo].[spGetBlogItem]
	@blogItemId int
AS
	SELECT b.*, u.Fullname AS 'CreatedByFullName' 
	FROM [BlogItem] b 
	INNER JOIN [User] u on u.[Id] = b.[CreatedByUser]
	WHERE b.[Id] = @blogItemId
RETURN 0
GO
PRINT N'Creating [dbo].[spGetEvent]...';


GO
CREATE PROCEDURE [dbo].[spGetEvent]
	@id int 
AS
	SELECT * FROM [Event] WHERE [Id] = @id
RETURN 0
GO
PRINT N'Creating [dbo].[spGetEventsForUser]...';


GO
CREATE PROCEDURE [dbo].[spGetEventsForUser]
	@userId int
AS
	SELECT * FROM [Event] WHERE [UserId] = @userId
RETURN 0
GO
PRINT N'Creating [dbo].[spGetMovieDetails]...';


GO
CREATE PROCEDURE [dbo].[spGetMovieDetails]
	@entityId int
AS
	SELECT * FROM [Movie] WHERE [EntityId] = @entityId
RETURN 0
GO
PRINT N'Creating [dbo].[spGetMusicDetails]...';


GO
CREATE PROCEDURE [dbo].[spGetMusicDetails]
	@entityId int
AS
	SELECT * FROM [Music] WHERE [EntityId] = @entityId
RETURN 0
GO
PRINT N'Creating [dbo].[spGetRatingsForEntity]...';


GO
CREATE PROCEDURE [dbo].[spGetRatingsForEntity]
	@entityId int
AS
	SELECT * FROM [Rating] WHERE [EntityId] = @entityId
RETURN 0
GO
PRINT N'Creating [dbo].[spGetUser]...';


GO
CREATE PROCEDURE [dbo].[spGetUser]
	@id int
AS
	SELECT * FROM [User] WHERE [Id] = @id
RETURN 0
GO
PRINT N'Creating [dbo].[spInsertEntity]...';


GO
CREATE PROCEDURE [dbo].[spInsertEntity]
	@name nvarchar(250),
	@entityType int,
		@id int output
AS
DECLARE @result int
	INSERT INTO [Entity] ([Name], [Created], [EntityType])
	VALUES (@name, GETDATE(), @entityType)

	SET @id = SCOPE_IDENTITY()

	SET @result  = @@ERROR  
	SELECT @result

	RETURN @result
GO
PRINT N'Creating [dbo].[spInsertEvent]...';


GO
CREATE PROCEDURE [dbo].[spInsertEvent]
	@name nvarchar(250),
	@description nvarchar(max),
	@userId int,
	@status int,
	@eventStart datetime = null,
	@eventEnd datetime = null,
	@location nvarchar(250),
	@isPublic bit,
	@id int output
AS
DECLARE @result int
	INSERT INTO [Event] ([Name], [Description], [UserId], [Status], [EventStart], [EventEnd], [Location], [IsPublic])
	VALUES (@name, @description, @userId, @status, @eventStart, @eventEnd, @location, @isPublic)
	
	SET @id = SCOPE_IDENTITY()

	SET @result  = @@ERROR  
	SELECT @result

	RETURN @result
GO
PRINT N'Creating [dbo].[spInsertMovie]...';


GO
CREATE PROCEDURE [dbo].[spInsertMovie]
	@entityId int,
	@name nvarchar(250),
	@imageFilePath nvarchar(250),
	@imdbLink nvarchar(250),
	@imdbRating decimal,
	@yearReleased int
AS
	INSERT INTO [Movie] ([EntityId], [Name], [ImageFilePath], [ImdbLink], [ImdbRating], [YearReleased])
	VALUES (@entityId, @name, @imageFilePath, @imdbLink, @imdbRating, @yearReleased)

RETURN 0
GO
PRINT N'Creating [dbo].[spInsertMusic]...';


GO
CREATE PROCEDURE [dbo].[spInsertMusic]
	@entityId int,
	@name nvarchar(250),
	@imageFilePath nvarchar(250),
	@spotifyLink nvarchar(250),
	@yearReleased int
AS
	INSERT INTO [Music] ([EntityId], [Name], [ImageFilePath], [SpotifyLink], [YearReleased])
	VALUES (@entityId, @name, @imageFilePath, @spotifyLink, @yearReleased)

RETURN 0
GO
PRINT N'Creating [dbo].[spInsertRating]...';


GO
CREATE PROCEDURE [dbo].[spInsertRating]
	@entityId int,
	@userId int,
	@ratingValue int,
	@ratingText nvarchar(max)
AS
	INSERT INTO [Rating] ([EntityId], [Created], [UserId], [RatingValue], [RatingText])
	VALUES (@entityId, GETDATE(), @userId, @ratingValue, @ratingText)
RETURN 0
GO
PRINT N'Creating [dbo].[spInsertUser]...';


GO
CREATE PROCEDURE [dbo].[spInsertUser]
	@username nvarchar(250),
	@password nvarchar(20),
	@fullName nvarchar(250),
	@userType int,
	@isActive bit,
	@id int output
AS
DECLARE @result int
	INSERT INTO [User] ([Username], [Password], [Fullname], [UserType], [IsActive] )
	VALUES (@username, @password, @fullName, @userType, @isActive)
	SET @id = SCOPE_IDENTITY()

	SET @result  = @@ERROR  
	SELECT @result

	RETURN @result
GO
PRINT N'Creating [dbo].[spUpdateEvent]...';


GO
CREATE PROCEDURE [dbo].[spUpdateEvent]
	@id int,
	@status int
AS
	UPDATE [Event] SET [Status] = @status WHERE [Id] = @id
RETURN 0
GO
PRINT N'Creating [dbo].[spUpdateUser]...';


GO
CREATE PROCEDURE [dbo].[spUpdateUser]
	@username nvarchar(250),
	@password nvarchar(20),
	@fullName nvarchar(250),
	@userType int,
	@isActive bit,
	@id int output
	
AS
	UPDATE [User] 
	SET [Username] = @username,
		[Password] = @password,
		[Fullname] = @fullName,
		[UserType] = @userType,
		[IsActive] = @isActive
	WHERE [Id] = @id
RETURN 0
GO
PRINT N'Refreshing [dbo].[spDeleteBlog]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spDeleteBlog]';


GO
PRINT N'Refreshing [dbo].[spUpdateBlog]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spUpdateBlog]';


GO
PRINT N'Refreshing [dbo].[spDeleteBlogItem]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spDeleteBlogItem]';


GO
PRINT N'Refreshing [dbo].[spUpdateBlogItem]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spUpdateBlogItem]';


GO
PRINT N'Update complete.';


GO
